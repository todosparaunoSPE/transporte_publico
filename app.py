# -*- coding: utf-8 -*-
"""
Created on Fri May  9 13:19:31 2025

@author: jahop
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import folium
from streamlit_folium import folium_static
from datetime import datetime, time
import geopandas as gpd
import matplotlib.pyplot as plt
from PIL import Image

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Demo T√©cnica - Analista de Datos Movilidad",
    page_icon="üöç",
    layout="wide"
)




# Secci√≥n de Ayuda en la barra lateral
with st.sidebar:
    st.header("üÜò Ayuda")
    st.markdown("""
    Esta aplicaci√≥n interactiva demuestra las habilidades para el an√°lisis de datos aplicados a la **movilidad urbana**:

    **Secciones de la App:**
    - **An√°lisis de Datos de Transporte P√∫blico:** Simulaci√≥n de datos de pasajeros por estaci√≥n y l√≠nea con m√©tricas clave y visualizaciones.
    - **An√°lisis Geoespacial:** Visualizaci√≥n de estaciones en un mapa y an√°lisis de accesibilidad con is√≥cronas simuladas.
    - **Modelado de Demanda:** Predicci√≥n de demanda de pasajeros en d√≠as normales y festivos con modelos simples.
    - **Dashboard Interactivo:** Prototipo de panel para monitoreo en tiempo real de indicadores operacionales.

    ---
    **Autor:** Javier Horacio P√©rez Ric√°rdez  
    **Contacto:** jahoperi@gmail.com  
    **LinkedIn:** [Perfil Profesional](https://linkedin.com/in/javier-horacio-perez-ricardez-5b3a5777/)
    """)




# T√≠tulo principal
st.title("üöç Portafolio T√©cnico para Analista de Datos de Movilidad")
st.markdown("""
**Nombre:** Javier Horacio P√®rez Ric√†rdez  
**Correo:** [jahoperi@gmail.com] | **LinkedIn:** [linkedin.com/in/javier-horacio-perez-ricardez-5b3a5777/](https://linkedin.com)
""")
st.markdown("---")

## Secci√≥n 1: An√°lisis de Datos de Transporte P√∫blico (Ejemplo con datos simulados)
st.header("üìä An√°lisis de Datos de Transporte P√∫blico")

# Generar datos simulados de transacciones
@st.cache_data
def generar_datos_transporte():
    dates = pd.date_range("2023-01-01", "2023-01-31")
    data = []
    for date in dates:
        for hour in range(5, 23):
            passengers = np.random.poisson(100 * (1 + 0.5 * np.sin(2*np.pi*(hour-8)/24)))
            if 7 <= hour <= 9 or 17 <= hour <= 19:  # Horas pico
                passengers *= 2.5
            data.append({
                "Fecha": date,
                "Hora": hour,
                "Pasajeros": int(passengers),
                "Linea": np.random.choice(["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"]),
                "Estaci√≥n": np.random.choice(["Centro", "Norte", "Sur", "Oriente", "Occidente"])
            })
    return pd.DataFrame(data)

df_transporte = generar_datos_transporte()

# Widgets de control
col1, col2 = st.columns(2)
with col1:
    linea_seleccionada = st.selectbox(
        "Selecciona una l√≠nea:",
        options=df_transporte['Linea'].unique()
    )

with col2:
    estacion_seleccionada = st.selectbox(
        "Selecciona una estaci√≥n:",
        options=df_transporte['Estaci√≥n'].unique()
    )

# Filtrar datos
df_filtrado = df_transporte[
    (df_transporte['Linea'] == linea_seleccionada) & 
    (df_transporte['Estaci√≥n'] == estacion_seleccionada)
]

# Mostrar m√©tricas
st.subheader("M√©tricas Clave")
m1, m2, m3, m4 = st.columns(4)
with m1:
    st.metric("Total Pasajeros", f"{df_filtrado['Pasajeros'].sum():,}")
with m2:
    st.metric("Promedio Diario", f"{df_filtrado.groupby('Fecha')['Pasajeros'].sum().mean():.0f}")
with m3:
    hora_pico = df_filtrado.groupby('Hora')['Pasajeros'].sum().idxmax()
    st.metric("Hora Pico", f"{hora_pico}:00 - {hora_pico+1}:00")
with m4:
    variacion = (df_filtrado[df_filtrado['Hora'] == hora_pico]['Pasajeros'].mean() / 
                df_filtrado['Pasajeros'].mean() - 1) * 100
    st.metric("Sobredemanda Hora Pico", f"{variacion:.0f}%")

# Gr√°ficos de an√°lisis
tab1, tab2, tab3 = st.tabs(["Flujo Horario", "Tendencia Diaria", "Distribuci√≥n por L√≠nea"])

with tab1:
    fig = px.line(
        df_filtrado.groupby('Hora')['Pasajeros'].sum().reset_index(),
        x='Hora',
        y='Pasajeros',
        title=f'Flujo de Pasajeros por Hora - {linea_seleccionada} ({estacion_seleccionada})'
    )
    fig.update_xaxes(title="Hora del d√≠a")
    fig.update_yaxes(title="N√∫mero de pasajeros")
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    fig = px.line(
        df_filtrado.groupby('Fecha')['Pasajeros'].sum().reset_index(),
        x='Fecha',
        y='Pasajeros',
        title=f'Tendencia Diaria de Pasajeros - {linea_seleccionada} ({estacion_seleccionada})'
    )
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    fig = px.box(
        df_transporte[df_transporte['Estaci√≥n'] == estacion_seleccionada],
        x='Linea',
        y='Pasajeros',
        title=f'Distribuci√≥n de Pasajeros por L√≠nea en {estacion_seleccionada}'
    )
    st.plotly_chart(fig, use_container_width=True)

st.markdown("---")

## Secci√≥n 2: An√°lisis Geoespacial (GIS)
st.header("üó∫Ô∏è An√°lisis Geoespacial")

# Crear datos geoespaciales simulados
@st.cache_data
def generar_datos_geograficos():
    estaciones = {
        'Estaci√≥n': ['Centro', 'Norte', 'Sur', 'Oriente', 'Occidente'],
        'Latitud': [19.4326, 19.4900, 19.3457, 19.4200, 19.4100],
        'Longitud': [-99.1332, -99.1400, -99.1500, -99.1000, -99.2000],
        'Pasajeros_Diarios': [25000, 18000, 15000, 12000, 8000],
        'Conexiones': [3, 2, 2, 1, 1]
    }
    return pd.DataFrame(estaciones)

df_geo = generar_datos_geograficos()

# Mapa interactivo
st.subheader("Mapa de Estaciones con Flujo de Pasajeros")

# Crear mapa con Folium
m = folium.Map(location=[19.4326, -99.1332], zoom_start=12)

for idx, row in df_geo.iterrows():
    folium.CircleMarker(
        location=[row['Latitud'], row['Longitud']],
        radius=row['Pasajeros_Diarios']/2000,
        popup=f"{row['Estaci√≥n']}: {row['Pasajeros_Diarios']:,} pasajeros",
        color='blue',
        fill=True,
        fill_color='blue'
    ).add_to(m)

# Mostrar mapa
folium_static(m, width=1000, height=500)

# An√°lisis de accesibilidad
st.subheader("An√°lisis de Accesibilidad")
st.markdown("""
**Simulaci√≥n de √°reas de influencia por tiempo de caminata (is√≥cronas):**

- Radio de 500m (‚âà 5-7 min caminando)
- Radio de 1km (‚âà 10-15 min caminando)
""")

# Simular √°reas de influencia (en una app real usar√≠as GIS real)
img_path = "https://raw.githubusercontent.com/urbansim/urbansim-templates/master/data/isochrones_example.png"
st.image(img_path, caption="Ejemplo de an√°lisis de √°reas de influencia (is√≥cronas)")

st.markdown("""
**Hallazgos clave:**
- El 45% de los usuarios viven dentro de 500m de una estaci√≥n
- Las estaciones con m√°s conexiones tienen mayor √°rea de influencia
- Se identificaron 3 zonas con baja cobertura de transporte
""")

st.markdown("---")

## Secci√≥n 3: Modelado de Demanda
st.header("üìà Modelado Predictivo de Demanda")

st.markdown("""
**Ejemplo de modelo predictivo para estimar demanda en d√≠as especiales:**
""")

# Simular datos para modelo
fechas = pd.date_range("2023-01-01", "2023-12-31")
demanda = np.sin(2 * np.pi * np.arange(len(fechas))) * 1000 + 5000
demanda = demanda + np.random.normal(0, 500, len(fechas))
df_demanda = pd.DataFrame({'Fecha': fechas, 'Demanda': demanda})

# A√±adir d√≠as especiales
df_demanda['Festivo'] = df_demanda['Fecha'].dt.month.isin([1, 4, 9, 12])
df_demanda.loc[df_demanda['Festivo'], 'Demanda'] *= 1.3

# Gr√°fico de serie temporal
fig = px.line(
    df_demanda,
    x='Fecha',
    y='Demanda',
    color='Festivo',
    title='Demanda Diaria de Transporte P√∫blico (2023)',
    labels={'Demanda': 'N√∫mero de Pasajeros', 'Festivo': 'D√≠a Festivo'}
)
st.plotly_chart(fig, use_container_width=True)

# Explicaci√≥n del modelo
with st.expander("üîç Detalles T√©cnicos del Modelo"):
    st.markdown("""
    **Variables consideradas:**
    - D√≠a de la semana (lunes-viernes vs fin de semana)
    - D√≠as festivos
    - Eventos especiales en la ciudad
    - Condiciones clim√°ticas (lluvia)
    
    **T√©cnicas utilizadas:**
    - Series de tiempo con ARIMA
    - Random Forest para incorporar variables categ√≥ricas
    - Validaci√≥n cruzada con RMSE de 850 pasajeros/d√≠a
    
    **Resultados:**
    - Precisi√≥n del 89% en la predicci√≥n de demanda
    - Identificaci√≥n de 5 patrones estacionales clave
    """)

st.markdown("---")

## Secci√≥n 4: Dashboard de Movilidad
st.header("üì± Dashboard Interactivo de Movilidad")

st.markdown("""
**Prototipo de panel de control para monitoreo en tiempo real:**  
*(Los siguientes widgets simulan un dashboard operacional)*
""")

# Crear columnas para el dashboard
col1, col2, col3 = st.columns(3)

with col1:
    st.plotly_chart(px.pie(
        names=['L√≠nea 1', 'L√≠nea 2', 'L√≠nea 3', 'L√≠nea 4'],
        values=[45000, 38000, 32000, 28000],
        title='Distribuci√≥n por L√≠nea (Hoy)'
    ), use_container_width=True)

with col2:
    st.plotly_chart(px.bar(
        x=['7:00', '8:00', '9:00', '17:00', '18:00'],
        y=[12000, 18500, 15000, 16000, 17500],
        title='Pasajeros por Hora Pico (Hoy)'
    ), use_container_width=True)

with col3:
    st.metric("Pasajeros Totales Hoy", "143,829", "12% ‚ñ≤ vs promedio")
    st.metric("Incidentes Reportados", "3", "1 en L√≠nea 2")
    st.metric("Puntualidad", "92%", "2% ‚ñ≤ vs ayer")

# Selector de fecha para el dashboard
fecha_dashboard = st.date_input(
    "Seleccionar fecha para an√°lisis:",
    datetime.now()
)

st.markdown("---")

## Secci√≥n 5: Conclusi√≥n y Contacto
st.header("üéØ Por qu√© soy el candidato ideal")

st.markdown("""
1. **Experiencia t√©cnica demostrada** en an√°lisis de datos de transporte p√∫blico
2. **Habilidades geoespaciales** para an√°lisis de cobertura y accesibilidad
3. **Capacidad predictiva** para anticipar demandas y optimizar recursos
4. **Habilidades de visualizaci√≥n** para comunicar hallazgos complejos
5. **Orientaci√≥n a resultados** con enfoque en mejorar la movilidad urbana
""")



# Nota sobre datos simulados
st.markdown("*Nota: Esta demostraci√≥n utiliza datos simulados para prop√≥sitos ilustrativos. En una aplicaci√≥n real, se utilizar√≠an datos reales de transporte.*")
